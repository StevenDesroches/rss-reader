<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2024-09-03T18:06:52+00:00</updated>

    <entry>
        <title>2024 Leadership Council Survey</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/08/26/council-survey.html" type="text/html" title="2024 Leadership Council Survey" />
        <published>2024-08-26T00:00:00+00:00</published>
        <updated>2024-08-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/08/26/council-survey.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/08/26/council-survey.html">&lt;p&gt;One of the responsibilities of the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/leadership-council&quot;&gt;leadership council&lt;/a&gt;,
formed by &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3392-leadership-council.html&quot;&gt;RFC 3392&lt;/a&gt;, is to solicit feedback on a yearly basis from the Project
on how we are performing our duties.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each year, the Council must solicit feedback on whether the Council is
serving its purpose effectively from all willing and able Project members and
openly discuss this feedback in a forum that allows and encourages active
participation from all Project members. To do so, the Council and other
Project members consult the high-level duties, expectations, and constraints
listed in this RFC and any subsequent revisions thereof to determine if the
Council is meeting its duties and obligations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the council&#x27;s first year, so we are still figuring out the best way to
do this. For this year, a short survey was sent out to all@ on June 24th, 2024,
ran for two weeks, and we are now presenting aggregated results from the
survey. Raw responses will not be shared beyond the leadership council, but the
results below reflect sentiments shared in response to each question. We invite
feedback and suggestions on actions to take on Zulip or through direct
communication to council members.&lt;/p&gt;
&lt;p&gt;We want to thank everyone for their feedback! It has been very valuable to hear
what people are thinking. As always, if you have thoughts or concerns, please
reach out to your council representative any time.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#survey-results&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;survey-results&quot;&gt;&lt;/a&gt;Survey results&lt;/h2&gt;
&lt;p&gt;We received 53 responses to the survey, representing roughly a 32% response
rate (out of 163 current recipients of all@).&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#do-you-feel-that-the-rust-leadership-council-is-serving-its-purpose-effectively&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;do-you-feel-that-the-rust-leadership-council-is-serving-its-purpose-effectively&quot;&gt;&lt;/a&gt;Do you feel that the Rust Leadership Council is serving its purpose effectively?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Response count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Strongly agree&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Agree&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unsure&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disagree&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strongly disagree&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#i-am-aware-of-the-role-that-the-leadership-council-plays-in-the-governance-of-the-rust-project&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;i-am-aware-of-the-role-that-the-leadership-council-plays-in-the-governance-of-the-rust-project&quot;&gt;&lt;/a&gt;I am aware of the role that the Leadership Council plays in the governance of the Rust Project.&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Response count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Strongly agree&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Agree&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unsure&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disagree&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strongly disagree&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-rust-project-has-a-solid-foundation-of-project-governance&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-rust-project-has-a-solid-foundation-of-project-governance&quot;&gt;&lt;/a&gt;The Rust Project has a solid foundation of Project governance.&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Response count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Strongly agree&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Agree&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unsure&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disagree&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strongly disagree&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#areas-that-are-going-well&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;areas-that-are-going-well&quot;&gt;&lt;/a&gt;Areas that are going well&lt;/h3&gt;
&lt;p&gt;For the rest of the questions we group responses into rough categories. The
number of those responses is also provided; note that some responses may have
fallen into more than one of these categories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5) Less drama&lt;/li&gt;
&lt;li&gt;(5) More public operations&lt;/li&gt;
&lt;li&gt;(5) Lack of clarity / knowledge about what it does
&lt;ul&gt;
&lt;li&gt;It&#x27;s not obvious why this is a &amp;quot;going well&amp;quot; from the responses, but it was
given in response to this question.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(4) General/inspecific positivity.&lt;/li&gt;
&lt;li&gt;(2) Improved Foundation/project relations&lt;/li&gt;
&lt;li&gt;(2) Funding travel/get-togethers of team members&lt;/li&gt;
&lt;li&gt;(1) Clear representation of members of the Project&lt;/li&gt;
&lt;li&gt;(1) Turnover while retaining members&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#areas-that-are-not-going-well&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;areas-that-are-not-going-well&quot;&gt;&lt;/a&gt;Areas that are not going well&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(15) Knowing what the council is doing&lt;/li&gt;
&lt;li&gt;(3) Not enough delegation of decisions&lt;/li&gt;
&lt;li&gt;(2) Finding people interested in being on the council / helping the council&lt;/li&gt;
&lt;li&gt;(1) What is the role of the project directors? Are they redundant given the council?&lt;/li&gt;
&lt;li&gt;(2) Too conservative in trying things / decisions/progress is made too slowly.&lt;/li&gt;
&lt;li&gt;(1) Worry over Foundation not trusting Project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suggestions for things to do in the responses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2) Addressing burnout&lt;/li&gt;
&lt;li&gt;(2) More social time between teams&lt;/li&gt;
&lt;li&gt;(2) More communication/accountability with/for the Foundation&lt;/li&gt;
&lt;li&gt;(2) Hiring people, particularly for non-technical roles&lt;/li&gt;
&lt;li&gt;(1) Helping expand the moderation team&lt;/li&gt;
&lt;li&gt;(1) Resolving the launching pad issues, e.g., through &amp;quot;Rust Society&amp;quot; work&lt;/li&gt;
&lt;li&gt;(1) Product management for language/compiler/libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#takeaways-for-future-surveys&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;takeaways-for-future-surveys&quot;&gt;&lt;/a&gt;Takeaways for future surveys&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We should structure the survey to specifically ask about high-level duties
and/or enumerate areas of interest (e.g., numeric responses on key questions
like openness and effectiveness)&lt;/li&gt;
&lt;li&gt;Consider linking published material/writing 1-year retrospective and that
being linked from the survey as pre-reading.&lt;/li&gt;
&lt;li&gt;We should disambiguate between neutral and &amp;quot;not enough information/knowledge
to answer&amp;quot; responses in multiple choice response answers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#proposed-action-items&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;proposed-action-items&quot;&gt;&lt;/a&gt;Proposed action items&lt;/h2&gt;
&lt;p&gt;We don&#x27;t have any concrete proposed actions at this time, though are interested
in finding ways to have more visilibity for council activities, as that seems
to be one of the key problems called out across all of the questions asked. How
exactly to achieve this remains unclear though.&lt;/p&gt;
&lt;p&gt;As mentioned earlier, we welcome input from the community on suggestions for
both improving this process and for actions to change how the council operates.&lt;/p&gt;
</content>

        <author>
            <name>The Leadership Council</name>
        </author>
    </entry>
    <entry>
        <title>Rust Project goals for 2024</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/08/12/Project-goals.html" type="text/html" title="Rust Project goals for 2024" />
        <published>2024-08-12T00:00:00+00:00</published>
        <updated>2024-08-12T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/08/12/Project-goals.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/08/12/Project-goals.html">&lt;p&gt;With the merging of &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3672#issuecomment-2254599176&quot;&gt;RFC #3672&lt;/a&gt;, the Rust project has selected a &lt;strong&gt;slate of 26 Project Goals&lt;/strong&gt; for the second half of 2024 (2024H2). This is our first time running an &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3614&quot;&gt;experimental new roadmapping process&lt;/a&gt;; assuming all goes well, we expect to be running the process roughly every six months. Of these goals, we have designated three of them as our &lt;strong&gt;flagship goals&lt;/strong&gt;, representing our most ambitious and most impactful efforts: (1) finalize preparations for the Rust 2024 edition; (2) bring the Async Rust experience closer to parity with sync Rust; and (3) resolve the biggest blockers to the Linux kernel building on stable Rust. As the year progresses we&#x27;ll be posting regular updates on these 3 flagship goals along with the 23 others.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#rusts-mission&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;rusts-mission&quot;&gt;&lt;/a&gt;Rust’s mission&lt;/h2&gt;
&lt;p&gt;All the goals selected ultimately further Rust&#x27;s mission of &lt;strong&gt;empowering everyone to build reliable and efficient software&lt;/strong&gt;. Rust targets programs that prioritize&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reliability and robustness;&lt;/li&gt;
&lt;li&gt;performance, memory usage, and resource consumption; and&lt;/li&gt;
&lt;li&gt;long-term maintenance and extensibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We consider &amp;quot;any two out of the three&amp;quot; to be the right heuristic for projects where Rust is a strong contender or possibly the best option, and we chose our goals in part so as to help ensure this is true.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#why-these-particular-flagship-goals&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;why-these-particular-flagship-goals&quot;&gt;&lt;/a&gt;Why these particular flagship goals?&lt;/h2&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/Rust-2024-Edition.html&quot;&gt;&lt;strong&gt;2024 Edition.&lt;/strong&gt;&lt;/a&gt; 2024 will mark the 4th Rust edition, following on the 2015, 2018, and 2021 editions. Similar to the &lt;a href&#x3D;&quot;https://github.com/nikomatsakis/rfcs/blob/rfl-project-goal/text/3085-edition-2021.html&quot;&gt;2021 edition&lt;/a&gt;, the 2024 edition is not a &amp;quot;major marketing push&amp;quot; but rather an opportunity to correct small ergonomic issues with Rust that will make it overall much easier to use. The &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;label%3AC-tracking-issue+label%3AA-edition-2024&quot;&gt;changes planned&lt;/a&gt; for the 2024 edition include (1) supporting &lt;code&gt;-&amp;gt; impl Trait&lt;/code&gt; and &lt;code&gt;async fn&lt;/code&gt; in traits by aligning capture behavior; (2) permitting (async) generators to be added in the future by reserving the &lt;code&gt;gen&lt;/code&gt; keyword; and (3) altering fallback for the &lt;code&gt;!&lt;/code&gt; type. The &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/Rust-2024-Edition.html#milestones&quot;&gt;plan&lt;/a&gt; is to finalize development of 2024 features this year; the Edition itself is planned for Rust v1.85 (to be released to beta 2025-01-03 and to stable on 2025-02-20).&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/async.html&quot;&gt;&lt;strong&gt;Async.&lt;/strong&gt;&lt;/a&gt; In 2024 we plan to deliver several critical async Rust building block features, most notably support for &lt;em&gt;async closures&lt;/em&gt; and &lt;em&gt;&lt;code&gt;Send&lt;/code&gt; bounds&lt;/em&gt;. This is part of a multi-year program aiming to raise the experience of authoring &amp;quot;async Rust&amp;quot; to the same level of quality as &amp;quot;sync Rust&amp;quot;. Async Rust is widely used, with 52% of the respondents in the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/02/19/2023-Rust-Annual-Survey-2023-results.html&quot;&gt;2023 Rust survey&lt;/a&gt; indicating that they use Rust to build server-side or backend applications.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/rfl_stable.html&quot;&gt;&lt;strong&gt;Rust for Linux.&lt;/strong&gt;&lt;/a&gt; The &lt;a href&#x3D;&quot;https://rust-for-linux.com/&quot;&gt;experimental support for Rust development in the Linux kernel&lt;/a&gt; is a watershed moment for Rust, demonstrating to the world that Rust is indeed capable of targeting all manner of low-level systems applications. And yet today that support rests on a &lt;a href&#x3D;&quot;https://github.com/Rust-for-Linux/linux/issues/2&quot;&gt;number of unstable features&lt;/a&gt;, blocking the effort from ever going beyond experimental status. For 2024H2 we will work to close the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/rfl_stable.html#the-next-six-months&quot;&gt;largest gaps that block support&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#highlights-from-the-other-goals&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;highlights-from-the-other-goals&quot;&gt;&lt;/a&gt;Highlights from the other goals&lt;/h2&gt;
&lt;p&gt;In addition to the flagship goals, the roadmap defines &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/index.html#project-goals&quot;&gt;23 other goals&lt;/a&gt;. Here is a subset to give you a flavor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/cargo-script.html&quot;&gt;Stabilize cargo-script&lt;/a&gt;, allowing single-file Rust scripts that embed dependencies; owned by &lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/Polonius.html&quot;&gt;Scalable Polonius support on nightly&lt;/a&gt;, improving Rust&#x27;s borrow checker to &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html&quot;&gt;support conditional returns and other patterns&lt;/a&gt;; owned by &lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;Rémy Rakic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/parallel-front-end.html&quot;&gt;Move parallel front end closer to stability&lt;/a&gt;, improving Rust compilation times by as much as 20%; owned by &lt;a href&#x3D;&quot;https://github.com/SparrowLii&quot;&gt;Sparrow Li&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/ergonomic-rc.html&quot;&gt;Ergonomic ref counting&lt;/a&gt;, reducing the syntactic overhead of working with reference-counted data; owned by &lt;a href&#x3D;&quot;https://github.com/jkelleyrtp&quot;&gt;Jonathan Kelley&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/merged-doctests.html&quot;&gt;Implementing &amp;quot;merged doctests&amp;quot;&lt;/a&gt;, which combine doctest files into one test to save testing time; owned by &lt;a href&#x3D;&quot;https://github.com/GuillaumeGomez&quot;&gt;Guillaume Gomez&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/index.html#project-goals&quot;&gt;the whole list&lt;/a&gt;! (Go ahead, we&#x27;ll wait, but come back here afterwards!)&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#how-to-track-progress&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-to-track-progress&quot;&gt;&lt;/a&gt;How to track progress&lt;/h2&gt;
&lt;p&gt;As the year progresses, we will be posting regular blog posts summarizing the progress on the various goals. If you&#x27;d like to see more detail, the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/milestone/2&quot;&gt;2024h2 milestone&lt;/a&gt; on the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/&quot;&gt;rust-lang/rust-project-goals&lt;/a&gt; repository has tracking issues for each of the goals. Each issue is assigned to the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/about/owners.html&quot;&gt;owner(s)&lt;/a&gt; of that particular goal. You can subscribe to the issue to receive regular updates, or monitor the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/435869-project-goals&quot;&gt;#project-goals channel&lt;/a&gt; on the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com&quot;&gt;rust-lang Zulip&lt;/a&gt;. Over time we will likely create other ways to follow along, such as a page on rust-lang.org to visualize progress (if you&#x27;d like to help with that, reach out to @nikomatsakis, thanks!).&lt;/p&gt;
&lt;p&gt;It&#x27;s worth stating up front: &lt;strong&gt;we don&#x27;t expect all of these goals to be completed&lt;/strong&gt;. Many of them were proposed and owned by volunteers, and it&#x27;s normal and expected that things don&#x27;t always work out as planned. In the event that a goal seems to stall out, we can either look for a new owner or just consider the goal again in the next round of goal planning.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#how-we-selected-project-goals&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-we-selected-project-goals&quot;&gt;&lt;/a&gt;How we selected project goals&lt;/h2&gt;
&lt;p&gt;Each project goal began as a PR against the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/&quot;&gt;rust-lang/rust-project-goals&lt;/a&gt; repository. As each PR came in, the goals were socialized with the teams. This process sometimes resulted in edits to the goals or in breaking up larger goals into smaller chunks (e.g., a far-reaching goal for &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/pull/10&quot;&gt;&amp;quot;higher level Rust&amp;quot;&lt;/a&gt; was broken into two specific deliverables, a &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/user-wide-cache.html&quot;&gt;user-wide build cache&lt;/a&gt; and &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/ergonomic-rc.html&quot;&gt;ergonomic ref counting&lt;/a&gt;). Finally, the goals were collated into &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3672#issuecomment-2254599176&quot;&gt;RFC #3672&lt;/a&gt;, which listed each goals as well as all the asks from the team. This RFC was approved by all the teams that are being asked for support or other requests.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#conclusion-project-goals-as-a-front-door-for-rust&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;conclusion-project-goals-as-a-front-door-for-rust&quot;&gt;&lt;/a&gt;Conclusion: Project Goals as a &amp;quot;front door&amp;quot; for Rust&lt;/h2&gt;
&lt;p&gt;To me, the most exciting thing about the Project Goals program has been seeing the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/cargo-semver-checks.html&quot;&gt;goals&lt;/a&gt; &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/Rust-for-SciComp.html&quot;&gt;coming&lt;/a&gt; &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/user-wide-cache.html&quot;&gt;from&lt;/a&gt; &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/std-verification.html&quot;&gt;outside&lt;/a&gt; the existing Rust maintainers. My hope is that the Project Goal process can supplement RFCs as an effective &amp;quot;front door&amp;quot; for the project, offering people who have the resources and skill to drive changes a way to float that idea and get feedback from the Rust teams &lt;em&gt;before&lt;/em&gt; they begin to work on it.&lt;/p&gt;
&lt;p&gt;Project Goals also help ensure the sustainability of the Rust open source community. In the past, it was difficult to tell when starting work on a project whether it would be well-received by the Rust maintainers. This was an obstacle for those who would like to fund efforts to improve Rust, as people don&#x27;t like to fund work without reasonable confidence it will succeed. Project goals are a way for project maintainers to &amp;quot;bless&amp;quot; a particular project and indicate their belief that it will be helpful to Rust. The Rust Foundation is using project goals as one of their criteria when considering &lt;a href&#x3D;&quot;https://foundation.rust-lang.org/grants/fellowships/&quot;&gt;fellowship applications&lt;/a&gt;, for example, and I expect over time other grant programs will do the same. But project goals are useful for others, too: having an approved project goal can help someone convince their employer to give them time to work on Rust open source efforts, for example, or give contractors the confidence they need to ensure their customer they&#x27;ll be able to get the work done.&lt;/p&gt;
&lt;p&gt;The next round of goal planning will be targeting 2025H1 and is expected to start in October. We look forward to seeing what great ideas are proposed!&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    <entry>
        <title>Announcing Rust 1.80.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/08/08/Rust-1.80.1.html" type="text/html" title="Announcing Rust 1.80.1" />
        <published>2024-08-08T00:00:00+00:00</published>
        <updated>2024-08-08T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/08/08/Rust-1.80.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/08/08/Rust-1.80.1.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.80.1. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust
1.80.1 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the
appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1801&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1801&quot;&gt;&lt;/a&gt;What&#x27;s in 1.80.1&lt;/h2&gt;
&lt;p&gt;Rust 1.80.1 fixes two regressions that were recently reported.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#miscompilation-when-comparing-floats&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;miscompilation-when-comparing-floats&quot;&gt;&lt;/a&gt;Miscompilation when comparing floats&lt;/h3&gt;
&lt;p&gt;In addition to the existing optimizations performed by LLVM, rustc is growing
its own set of optimizations. Rust 1.78.0 added a new one, implementing &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Jump_threading&quot;&gt;&amp;quot;jump
threading&amp;quot;&lt;/a&gt; (merging together two adjacent branches that perform the same
comparison).&lt;/p&gt;
&lt;p&gt;The optimization was also enabled on branches checking for floating point
equality, but it didn&#x27;t implement the special rules needed for floats
comparison (&lt;code&gt;NaN !&#x3D; NaN&lt;/code&gt; and &lt;code&gt;0.0 &#x3D;&#x3D; -0.0&lt;/code&gt;). This caused the optimization to
miscompile code performing those checks.&lt;/p&gt;
&lt;p&gt;Rust 1.80.1 addresses the problem by preventing the optimization from being
applied to float comparisons, while retaining the optimization on other
supported types.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#false-positives-in-the-dead_code-lint&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;false-positives-in-the-dead_code-lint&quot;&gt;&lt;/a&gt;False positives in the &lt;code&gt;dead_code&lt;/code&gt; lint&lt;/h3&gt;
&lt;p&gt;Rust 1.80.0 contained refactorings to the &lt;code&gt;dead_code&lt;/code&gt; lint. We received
multiple reports that the new lint implementation produces false positives, so
we are reverting the changes in Rust 1.80.1. We&#x27;ll continue to experiment on
how to improve the accuracy of &lt;code&gt;dead_code&lt;/code&gt; in future releases.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributors-to-1801&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1801&quot;&gt;&lt;/a&gt;Contributors to 1.80.1&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.80.1. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.80.1/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    <entry>
        <title>crates.io: development update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/07/29/crates-io-development-update.html" type="text/html" title="crates.io: development update" />
        <published>2024-07-29T00:00:00+00:00</published>
        <updated>2024-07-29T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/07/29/crates-io-development-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/07/29/crates-io-development-update.html">&lt;p&gt;Since crates.io does not have releases in the classical sense, there are no release notes either. However, the crates.io team still wants to keep you all updated about the ongoing development of crates.io. This blog post is a summary of the most significant changes that we have made to crates.io in the past months.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#cargo-install&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cargo-install&quot;&gt;&lt;/a&gt;&lt;code&gt;cargo install&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;When looking at crates like &lt;a href&#x3D;&quot;https://crates.io/crates/ripgrep&quot;&gt;ripgrep&lt;/a&gt; you will notice that the installation instructions now say &lt;code&gt;cargo install ripgrep&lt;/code&gt; instead of &lt;code&gt;cargo add ripgrep&lt;/code&gt;. We implemented this change to make it easier for users to install crates that have binary targets. &lt;code&gt;cargo add&lt;/code&gt; is still the correct command to use when adding a crate as a dependency to your project, but for binary-only crates like ripgrep, &lt;code&gt;cargo install&lt;/code&gt; is the way to go.&lt;/p&gt;
&lt;p&gt;We achieved this by analyzing the uploaded crate files when they are published to crates.io. If a crate has binary targets, the names of the binaries will now be saved in our database and then conveniently displayed on the crate page:&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;../../../images/2024-07-29-crates-io-development-update/cargo-install.png&quot; alt&#x3D;&quot;Dark Mode Screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After shipping this feature we got notified that some library crates use binaries for local development purposes and the author would prefer to not have the binaries listed on the crate page. The cargo team has been working on a &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/13713&quot;&gt;solution&lt;/a&gt; for this by using the &lt;code&gt;exclude&lt;/code&gt; manifest field, which will be shipped soon.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#dark-mode&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;dark-mode&quot;&gt;&lt;/a&gt;Dark mode&lt;/h2&gt;
&lt;p&gt;If your operating system is set to dark mode, you may have noticed that crates.io now automatically switches to a dark user interface theme. If you don&#x27;t like the dark theme, you can still switch back to the light theme by clicking the color theme icon in the top right corner of the page. By default, the theme will be set based on your operating system&#x27;s theme settings, but you can also override this setting manually.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;../../../images/2024-07-29-crates-io-development-update/dark-mode.png&quot; alt&#x3D;&quot;Dark Mode Screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Similar to GitHub, we now also have dark/light theme support for images in your &lt;code&gt;README.md&lt;/code&gt; files:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-html&quot;&gt;&amp;lt;picture&amp;gt;
  &amp;lt;source media&#x3D;&amp;quot;(prefers-color-scheme: dark)&amp;quot; srcset&#x3D;&amp;quot;https://test.crates.io/logo_dark.svg&amp;quot;&amp;gt;
  &amp;lt;img src&#x3D;&amp;quot;https://test.crates.io/logo.svg&amp;quot; alt&#x3D;&amp;quot;logo&amp;quot; width&#x3D;&amp;quot;200&amp;quot;&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#rss-feeds&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;rss-feeds&quot;&gt;&lt;/a&gt;RSS feeds&lt;/h2&gt;
&lt;p&gt;Inspired by our friends at the &lt;a href&#x3D;&quot;https://warehouse.pypa.io/api-reference/feeds.html&quot;&gt;Python Package Index&lt;/a&gt;, we have introduced a couple of experimental RSS feeds for crates.io:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://static.crates.io/rss/crates.xml&quot;&gt;https://static.crates.io/rss/crates.xml&lt;/a&gt;: The latest new crates registered on crates.io (the past 60 minutes, but at least 50 new crates).&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://static.crates.io/rss/updates.xml&quot;&gt;https://static.crates.io/rss/updates.xml&lt;/a&gt;: The latest version updates on crates.io (the past 60 minutes, but at least 100 versions).&lt;/li&gt;
&lt;li&gt;e.g. &lt;a href&#x3D;&quot;https://static.crates.io/rss/crates/serde.xml&quot;&gt;https://static.crates.io/rss/crates/serde.xml&lt;/a&gt;: The latest version updates of the &lt;code&gt;serde&lt;/code&gt; crate (the past 24 hours, but at least 10 versions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will allow you to keep track of the latest crate releases and updates in your favorite RSS reader. The original GitHub issue requested a feed for all the crates you &amp;quot;follow&amp;quot; on crates.io, but we decided that per-crate feeds would be more useful for now. If you have any feedback on this feature, please let us know!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#api-token-expiry-notifications&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;api-token-expiry-notifications&quot;&gt;&lt;/a&gt;API token expiry notifications&lt;/h2&gt;
&lt;p&gt;Our crates.io team member &lt;a href&#x3D;&quot;https://github.com/hi-rustin&quot;&gt;@hi-rustin&lt;/a&gt; has been very active in improving our API tokens user experience. If you create an API token with an expiry date, you will now receive a notification email three days before the token expires. This will help you to remember to renew your token before it expires and your scripts stop working.&lt;/p&gt;
&lt;p&gt;Following this change, he also implemented a way to create new API tokens based on the configuration of existing tokens, which will make it much easier to renew tokens without having to reconfigure all the permissions. The user interface on the &amp;quot;API tokens&amp;quot; settings page now shows a &amp;quot;Regenerate&amp;quot; button, which will allow you to copy the permissions of existing tokens. Similarly, the token expiry notifications will now also contain a link that directly fills in the permissions of the expiring token, so you can easily create a new token with the same permissions.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;../../../images/2024-07-29-crates-io-development-update/regenerate-button.png&quot; alt&#x3D;&quot;Dark Mode Screenshot&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#database-performance-optimizations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;database-performance-optimizations&quot;&gt;&lt;/a&gt;Database performance optimizations&lt;/h2&gt;
&lt;p&gt;Our latest addition to the crates.io team, &lt;a href&#x3D;&quot;https://github.com/eth3lbert&quot;&gt;@eth3lbert&lt;/a&gt;, has been working on optimizing the database queries that power crates.io. He has been working on a couple of pull requests that aim to reduce the load on the database server and make the website faster for everyone. Some of the changes he has made include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io/pull/7865&quot;&gt;#7865&lt;/a&gt;: Further speed-up reverse dependencies query&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io/pull/7941&quot;&gt;#7941&lt;/a&gt;: Improve crates endpoint performance&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io/pull/8734&quot;&gt;#8734&lt;/a&gt;: Add partial index on versions table&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io/pull/8737&quot;&gt;#8737&lt;/a&gt;: Improve the performance of reverse dependencies using the &lt;code&gt;default_versions&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to that, we have recently migrated our database servers to a new provider with more memory and faster storage. This has also improved the performance of the website and allowed us to run more complex queries without running into performance issues. It was previously taking multiple seconds to load e.g. https://crates.io/crates/syn/reverse_dependencies, but now the server usually responds in much less than a second.&lt;/p&gt;
&lt;p&gt;Another piece of the puzzle was archiving old data that is no longer needed for the website. We have moved the download counts older than 90 days into CSV files that are stored on S3 and will soon be publicly available for download via our CDNs. This has reduced the size of the database significantly and improved the performance of some of our background jobs.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#feedback&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;feedback&quot;&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;p&gt;We hope you enjoyed this update on the development of crates.io. If you have any feedback or questions, please let us know on &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318791-t-crates-io&quot;&gt;Zulip&lt;/a&gt; or &lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io/discussions&quot;&gt;GitHub&lt;/a&gt;. We are always happy to hear from you and are looking forward to your feedback!&lt;/p&gt;
</content>

        <author>
            <name>Tobias Bieniek</name>
        </author>
    </entry>
    <entry>
        <title>Announcing Rust 1.80.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/07/25/Rust-1.80.0.html" type="text/html" title="Announcing Rust 1.80.0" />
        <published>2024-07-25T00:00:00+00:00</published>
        <updated>2024-07-25T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/07/25/Rust-1.80.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/07/25/Rust-1.80.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.80.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via &lt;code&gt;rustup&lt;/code&gt;, you can get 1.80.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;$ rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/releases.html#version-1800-2024-07-25&quot;&gt;detailed release notes for 1.80.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1800-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1800-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.80.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#lazycell-and-lazylock&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;lazycell-and-lazylock&quot;&gt;&lt;/a&gt;&lt;code&gt;LazyCell&lt;/code&gt; and &lt;code&gt;LazyLock&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;These &amp;quot;lazy&amp;quot; types delay the initialization of their data until first access. They are similar to the &lt;code&gt;OnceCell&lt;/code&gt; and &lt;code&gt;OnceLock&lt;/code&gt; types &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#oncecell-and-oncelock&quot;&gt;stabilized in 1.70&lt;/a&gt;, but with the initialization function included in the cell. This completes the stabilization of functionality adopted into the standard library from the popular &lt;a href&#x3D;&quot;https://crates.io/crates/lazy-static&quot;&gt;&lt;code&gt;lazy_static&lt;/code&gt;&lt;/a&gt; and &lt;a href&#x3D;&quot;https://crates.io/crates/once_cell&quot;&gt;&lt;code&gt;once_cell&lt;/code&gt;&lt;/a&gt; crates.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LazyLock&lt;/code&gt; is the thread-safe option, making it suitable for places like &lt;code&gt;static&lt;/code&gt; values. For example, both the &lt;code&gt;spawn&lt;/code&gt; thread and the main &lt;code&gt;scope&lt;/code&gt; will see the exact same duration below, since &lt;code&gt;LAZY_TIME&lt;/code&gt; will be initialized once, by whichever ends up accessing the static first. Neither use has to know &lt;em&gt;how&lt;/em&gt; to initialize it, unlike they would with &lt;code&gt;OnceLock::get_or_init()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;use std::sync::LazyLock;
use std::time::Instant;

static LAZY_TIME: LazyLock&amp;lt;Instant&amp;gt; &#x3D; LazyLock::new(Instant::now);

fn main() {
    let start &#x3D; Instant::now();
    std::thread::scope(|s| {
        s.spawn(|| {
            println!(&amp;quot;Thread lazy time is {:?}&amp;quot;, LAZY_TIME.duration_since(start));
        });
        println!(&amp;quot;Main lazy time is {:?}&amp;quot;, LAZY_TIME.duration_since(start));
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;LazyCell&lt;/code&gt; does the same thing without thread synchronization, so it doesn&#x27;t implement &lt;code&gt;Sync&lt;/code&gt;, which is needed for &lt;code&gt;static&lt;/code&gt;, but it can still be used in &lt;code&gt;thread_local!&lt;/code&gt; statics (with distinct initialization per thread). Either type can also be used in other data structures as well, depending on thread-safety needs, so lazy initialization is available everywhere!&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#checked-cfg-names-and-values&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;checked-cfg-names-and-values&quot;&gt;&lt;/a&gt;Checked &lt;code&gt;cfg&lt;/code&gt; names and values&lt;/h3&gt;
&lt;p&gt;In 1.79, &lt;code&gt;rustc&lt;/code&gt; stabilized a &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/check-cfg.html&quot;&gt;&lt;code&gt;--check-cfg&lt;/code&gt; flag&lt;/a&gt;, and now Cargo 1.80 is enabling those checks for all &lt;code&gt;cfg&lt;/code&gt; names and values that it knows (in addition to the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/check-cfg.html#well-known-names-and-values&quot;&gt;well known names and values&lt;/a&gt; from &lt;code&gt;rustc&lt;/code&gt;). This includes feature names from &lt;code&gt;Cargo.toml&lt;/code&gt; as well as new &lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt; output from build scripts.&lt;/p&gt;
&lt;p&gt;Unexpected cfgs are reported by the warn-by-default &lt;code&gt;unexpected_cfgs&lt;/code&gt; lint, which is meant to catch typos or other misconfiguration. For example, in a project with an optional &lt;code&gt;rayon&lt;/code&gt; dependency, this code is configured for the wrong &lt;code&gt;feature&lt;/code&gt; value:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn main() {
    println!(&amp;quot;Hello, world!&amp;quot;);

    #[cfg(feature &#x3D; &amp;quot;crayon&amp;quot;)]
    rayon::join(
        || println!(&amp;quot;Hello, Thing One!&amp;quot;),
        || println!(&amp;quot;Hello, Thing Two!&amp;quot;),
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;warning: unexpected &#x60;cfg&#x60; condition value: &#x60;crayon&#x60;
 --&amp;gt; src/main.rs:4:11
  |
4 |     #[cfg(feature &#x3D; &amp;quot;crayon&amp;quot;)]
  |           ^^^^^^^^^^--------
  |                     |
  |                     help: there is a expected value with a similar name: &#x60;&amp;quot;rayon&amp;quot;&#x60;
  |
  &#x3D; note: expected values for &#x60;feature&#x60; are: &#x60;rayon&#x60;
  &#x3D; help: consider adding &#x60;crayon&#x60; as a feature in &#x60;Cargo.toml&#x60;
  &#x3D; note: see &amp;lt;https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html&amp;gt; for more information about checking conditional configuration
  &#x3D; note: &#x60;#[warn(unexpected_cfgs)]&#x60; on by default
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same warning is reported regardless of whether the actual &lt;code&gt;rayon&lt;/code&gt; feature is enabled or not.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;[lints]&lt;/code&gt; table in the &lt;code&gt;Cargo.toml&lt;/code&gt; manifest can also be used to extend the list of known names and values for custom &lt;code&gt;cfg&lt;/code&gt;. &lt;code&gt;rustc&lt;/code&gt; automatically provides &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/check-cfg.html#specifying-expected-names-and-values&quot;&gt;the syntax&lt;/a&gt; to use in the warning.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[lints.rust]
unexpected_cfgs &#x3D; { level &#x3D; &amp;quot;warn&amp;quot;, check-cfg &#x3D; [&#x27;cfg(foo, values(&amp;quot;bar&amp;quot;))&#x27;] }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about this feature in a &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/05/06/check-cfg.html&quot;&gt;previous blog post&lt;/a&gt; announcing the availability of the feature on nightly.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#exclusive-ranges-in-patterns&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;exclusive-ranges-in-patterns&quot;&gt;&lt;/a&gt;Exclusive ranges in patterns&lt;/h3&gt;
&lt;p&gt;Rust ranged patterns can now use exclusive endpoints, written &lt;code&gt;a..b&lt;/code&gt; or &lt;code&gt;..b&lt;/code&gt; similar to the &lt;code&gt;Range&lt;/code&gt; and &lt;code&gt;RangeTo&lt;/code&gt; expression types. For example, the following patterns can now use the same constants for the end of one pattern and the start of the next:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;pub fn size_prefix(n: u32) -&amp;gt; &amp;amp;&#x27;static str {
    const K: u32 &#x3D; 10u32.pow(3);
    const M: u32 &#x3D; 10u32.pow(6);
    const G: u32 &#x3D; 10u32.pow(9);
    match n {
        ..K &#x3D;&amp;gt; &amp;quot;&amp;quot;,
        K..M &#x3D;&amp;gt; &amp;quot;k&amp;quot;,
        M..G &#x3D;&amp;gt; &amp;quot;M&amp;quot;,
        G.. &#x3D;&amp;gt; &amp;quot;G&amp;quot;,
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Previously, only inclusive (&lt;code&gt;a..&#x3D;b&lt;/code&gt; or &lt;code&gt;..&#x3D;b&lt;/code&gt;) or open (&lt;code&gt;a..&lt;/code&gt;) ranges were allowed in patterns, so code like this would require separate constants for inclusive endpoints like &lt;code&gt;K - 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Exclusive ranges have been implemented as an unstable feature for a long time, but the blocking concern was that they might add confusion and increase the chance of off-by-one errors in patterns. To that end, exhaustiveness checking has been enhanced to better detect gaps in pattern matching, and new lints &lt;code&gt;non_contiguous_range_endpoints&lt;/code&gt; and &lt;code&gt;overlapping_range_endpoints&lt;/code&gt; will help detect cases where you might want to switch exclusive patterns to inclusive, or vice versa.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/rc/struct.Rc.html#impl-Default-for-Rc%3CCStr%3E&quot;&gt;&lt;code&gt;impl Default for Rc&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/rc/struct.Rc.html#impl-Default-for-Rc%3Cstr%3E&quot;&gt;&lt;code&gt;impl Default for Rc&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/rc/struct.Rc.html#impl-Default-for-Rc%3C%5BT%5D%3E&quot;&gt;&lt;code&gt;impl Default for Rc&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#impl-Default-for-Arc%3Cstr%3E&quot;&gt;&lt;code&gt;impl Default for Arc&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#impl-Default-for-Arc%3CCStr%3E&quot;&gt;&lt;code&gt;impl Default for Arc&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#impl-Default-for-Arc%3C%5BT%5D%3E&quot;&gt;&lt;code&gt;impl Default for Arc&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/boxed/struct.Box.html#impl-IntoIterator-for-Box%3C%5BI%5D,+A%3E&quot;&gt;&lt;code&gt;impl IntoIterator for Box&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/boxed/struct.Box.html#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E&quot;&gt;&lt;code&gt;impl FromIterator&amp;lt;String&amp;gt; for Box&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/boxed/struct.Box.html#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E&quot;&gt;&lt;code&gt;impl FromIterator&amp;lt;char&amp;gt; for Box&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/cell/struct.LazyCell.html&quot;&gt;&lt;code&gt;LazyCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.LazyLock.html&quot;&gt;&lt;code&gt;LazyLock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.div_duration_f32&quot;&gt;&lt;code&gt;Duration::div_duration_f32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.div_duration_f64&quot;&gt;&lt;code&gt;Duration::div_duration_f64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.take_if&quot;&gt;&lt;code&gt;Option::take_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/trait.Seek.html#method.seek_relative&quot;&gt;&lt;code&gt;Seek::seek_relative&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.as_slice&quot;&gt;&lt;code&gt;BinaryHeap::as_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.offset&quot;&gt;&lt;code&gt;NonNull::offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.byte_offset&quot;&gt;&lt;code&gt;NonNull::byte_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.add&quot;&gt;&lt;code&gt;NonNull::add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.byte_add&quot;&gt;&lt;code&gt;NonNull::byte_add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.sub&quot;&gt;&lt;code&gt;NonNull::sub&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.byte_sub&quot;&gt;&lt;code&gt;NonNull::byte_sub&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.offset_from&quot;&gt;&lt;code&gt;NonNull::offset_from&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.byte_offset_from&quot;&gt;&lt;code&gt;NonNull::byte_offset_from&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.read&quot;&gt;&lt;code&gt;NonNull::read&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.read_volatile&quot;&gt;&lt;code&gt;NonNull::read_volatile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.read_unaligned&quot;&gt;&lt;code&gt;NonNull::read_unaligned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.write&quot;&gt;&lt;code&gt;NonNull::write&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.write_volatile&quot;&gt;&lt;code&gt;NonNull::write_volatile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.write_unaligned&quot;&gt;&lt;code&gt;NonNull::write_unaligned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.write_bytes&quot;&gt;&lt;code&gt;NonNull::write_bytes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.copy_to&quot;&gt;&lt;code&gt;NonNull::copy_to&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.copy_to_nonoverlapping&quot;&gt;&lt;code&gt;NonNull::copy_to_nonoverlapping&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.copy_from&quot;&gt;&lt;code&gt;NonNull::copy_from&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.copy_from_nonoverlapping&quot;&gt;&lt;code&gt;NonNull::copy_from_nonoverlapping&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.replace&quot;&gt;&lt;code&gt;NonNull::replace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.swap&quot;&gt;&lt;code&gt;NonNull::swap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.drop_in_place&quot;&gt;&lt;code&gt;NonNull::drop_in_place&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.align_offset&quot;&gt;&lt;code&gt;NonNull::align_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at_checked&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_checked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at_mut_checked&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_mut_checked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_at_checked&quot;&gt;&lt;code&gt;str::split_at_checked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_at_mut_checked&quot;&gt;&lt;code&gt;str::split_at_mut_checked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.trim_ascii&quot;&gt;&lt;code&gt;str::trim_ascii&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.trim_ascii_start&quot;&gt;&lt;code&gt;str::trim_ascii_start&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.trim_ascii_end&quot;&gt;&lt;code&gt;str::trim_ascii_end&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.trim_ascii&quot;&gt;&lt;code&gt;&amp;lt;[u8]&amp;gt;::trim_ascii&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.trim_ascii_start&quot;&gt;&lt;code&gt;&amp;lt;[u8]&amp;gt;::trim_ascii_start&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.trim_ascii_end&quot;&gt;&lt;code&gt;&amp;lt;[u8]&amp;gt;::trim_ascii_end&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/net/struct.Ipv4Addr.html#associatedconstant.BITS&quot;&gt;&lt;code&gt;Ipv4Addr::BITS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/net/struct.Ipv4Addr.html#method.to_bits&quot;&gt;&lt;code&gt;Ipv4Addr::to_bits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/net/struct.Ipv4Addr.html#method.from_bits&quot;&gt;&lt;code&gt;Ipv4Addr::from_bits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/net/struct.Ipv6Addr.html#associatedconstant.BITS&quot;&gt;&lt;code&gt;Ipv6Addr::BITS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/net/struct.Ipv6Addr.html#method.to_bits&quot;&gt;&lt;code&gt;Ipv6Addr::to_bits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/net/struct.Ipv6Addr.html#method.from_bits&quot;&gt;&lt;code&gt;Ipv6Addr::from_bits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html#method.into_flattened&quot;&gt;&lt;code&gt;Vec::&amp;lt;[T; N]&amp;gt;::into_flattened&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.as_flattened&quot;&gt;&lt;code&gt;&amp;lt;[[T; N]]&amp;gt;::as_flattened&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.as_flattened_mut&quot;&gt;&lt;code&gt;&amp;lt;[[T; N]]&amp;gt;::as_flattened_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.last_chunk&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::last_chunk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.new&quot;&gt;&lt;code&gt;BinaryHeap::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/releases/tag/1.80.0&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-180-2024-07-25&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-180&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributors-to-1800&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1800&quot;&gt;&lt;/a&gt;Contributors to 1.80.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.80.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.80.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    <entry>
        <title>Types Team Update and Roadmap</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/06/26/types-team-update.html" type="text/html" title="Types Team Update and Roadmap" />
        <published>2024-06-26T00:00:00+00:00</published>
        <updated>2024-06-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/06/26/types-team-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/06/26/types-team-update.html">&lt;p&gt;It has been more than a year since &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2023/01/20/types-announcement.html&quot;&gt;the initial blog post&lt;/a&gt; announcing the Types team, and our initial set of goals. For details on what the team is, why it was formed, or our previously-stated overarching goals, go check out that blog post. In short the Types team&#x27;s purview extends to the parts of the Rust language and compiler that involve the type system, e.g. type checking, trait solving, and borrow checking. Our short and long term goals effectively work to make the type system sound, consistent, extensible, and fast.&lt;/p&gt;
&lt;p&gt;Before getting into details, it&#x27;s worth sharing a quick point: the team over the last year has been very successful. Oftentimes, it&#x27;s hard to measure impact, particularly when long-term roadmap goals are hard to quantify progress on and various short-term goals either are hit or aren&#x27;t. But, there is one clear statistic that is somewhat indicative of the team&#x27;s progress: over the last year or so, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pulls?q&#x3D;is%3Apr+label%3AT-types+label%3Adisposition-merge+is%3Amerged+closed%3A%3E2023-01-20+sort%3Acreated-asc+&quot;&gt;more than 50 user-facing changes&lt;/a&gt; have landed, each separately approved by Types Team consensus through FCP.&lt;/p&gt;
&lt;p&gt;The changes lie at the boundary between language design and implementation, and the Types Team (which is a subteam of both the Language and Compiler Teams) existing means that not only does the Rust Project have the bandwidth to make these decisions but we also have enough people with the knowledge and experience of the type system to make informed decisions that overall make the language better.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#the-priorities-of-the-types-team&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-priorities-of-the-types-team&quot;&gt;&lt;/a&gt;The priorities of the types team&lt;/h2&gt;
&lt;p&gt;To evaluate our progress over the last year and our roadmap going forward,
lets start with our main priorities in order of importance. We will refer
to them during the remainder of this post. To reach our goals, we need a
a healthy group of maintainers which have the expertise and capacity to
react to issues and to implement complex changes.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-type-system-should-be-sound&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-type-system-should-be-sound&quot;&gt;&lt;/a&gt;The type system should be Sound&lt;/h3&gt;
&lt;p&gt;One of the main promises of Rust is that there cannot be undefined behavior when using
only safe code. It might surprise you that there are currently &lt;a href&#x3D;&quot;https://github.com/orgs/rust-lang/projects/44/views/1&quot;&gt;known type system
bugs&lt;/a&gt; which break these guarantees. Most of these issues were found by people familiar with
the inner workings of the compiler by explicitly looking for them and we generally do not expect
users to encounter these bugs by accident. Regardless, we deeply care about fixing them
and are working towards a fully sound and ideally verified type system.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-type-system-should-be-consistent&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-type-system-should-be-consistent&quot;&gt;&lt;/a&gt;The type system should be Consistent&lt;/h3&gt;
&lt;p&gt;The type system should be easy to reason about. We should avoid rough edges and
special-cases if possible. We want to keep both the implementation and user-facing behavior
as simple as possible. Where possible we want to consider the overall design instead of
providing local targeted fixes. This is necessary to build trust in the soundness of the
type system and allows for a simpler mental model of Rust.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-type-system-should-be-extensible&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-type-system-should-be-extensible&quot;&gt;&lt;/a&gt;The type system should be Extensible&lt;/h3&gt;
&lt;p&gt;Rust is still evolving and we will be required to extend the type system to enable new
language features going forward. This requires the type system to be extensible and
approachable. The design of the language should not be adapted to work around
short-comings of its current type system implementation. We should collaborate with
other teams and users to make sure we&#x27;re aware of their problems and consider possible
future extensions in our implementation and design.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-type-system-should-be-fast&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-type-system-should-be-fast&quot;&gt;&lt;/a&gt;The type system should be Fast&lt;/h3&gt;
&lt;p&gt;We care about the compile times of Rust and want to consider the impact on compile times
of our designs. We should look for effective approaches to speed up the existing implementation,
by improving caching or adding fast paths where applicable. We should also be aware of the
compile time impact of future additions to the type system and suggest more performant
solutions where possible.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#updates&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;updates&quot;&gt;&lt;/a&gt;Updates&lt;/h2&gt;
&lt;p&gt;We have been very active over the last year and made some significant progress. There
are also a few non-technical updates we would like to share.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#organizational-updates&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;organizational-updates&quot;&gt;&lt;/a&gt;Organizational updates&lt;/h2&gt;
&lt;p&gt;First, a huge welcome to the two new members to team since the announcement post: &lt;a href&#x3D;&quot;https://github.com/boxyuwu&quot;&gt;@BoxyUwU&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/aliemjay&quot;&gt;@aliemjay&lt;/a&gt;. &lt;a href&#x3D;&quot;https://github.com/boxyuwu&quot;&gt;@BoxyUwU&lt;/a&gt; has been doing a lot of work on const generics and made significant contributions to the design of the next generation trait solver. &lt;a href&#x3D;&quot;https://github.com/aliemjay&quot;&gt;@aliemjay&lt;/a&gt; has been working on some very subtle improvements to opaque types - &lt;code&gt;impl Trait&lt;/code&gt; - and to borrow checking. They are both invaluable additions to the team.&lt;/p&gt;
&lt;p&gt;We also organized another in-person Types Team meetup last October, immediately prior to EuroRust. We discussed the state of the team, looked at current implementation challenges and in-progress work, and reviewed and updated &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2023/01/20/types-announcement.html#roadmap&quot;&gt;the roadmap from the previous meetup&lt;/a&gt;. Most of this will be covered in this blog post.&lt;/p&gt;
&lt;p&gt;Finally, as discussed in the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3254-types-team.html&quot;&gt;RFC&lt;/a&gt;, we would like to have leads rotate out regularly, largely to help share the burden and experience of leads&#x27; work. So with that being said, &lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;@nikomatsakis&lt;/a&gt; is rotating out and &lt;a href&#x3D;&quot;https://github.com/lcnr&quot;&gt;@lcnr&lt;/a&gt; is joining to co-lead alongside &lt;a href&#x3D;&quot;https://github.com/jackh726/&quot;&gt;@jackh726&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#roadmap-progress-and-major-milestones&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;roadmap-progress-and-major-milestones&quot;&gt;&lt;/a&gt;Roadmap progress and major milestones&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-next-generation-trait-solver&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-next-generation-trait-solver&quot;&gt;&lt;/a&gt;The next-generation trait solver&lt;/h3&gt;
&lt;p&gt;There has been &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pulls?q&#x3D;is%3Apr+label%3AWG-trait-system-refactor+-label%3Arollup+is%3Amerged+closed%3A%3E2023-01-20+sort%3Acreated-asc+&quot;&gt;a lot of work&lt;/a&gt; on the &lt;a href&#x3D;&quot;https://github.com/rust-lang/trait-system-refactor-initiative/&quot;&gt;next-generation trait solver&lt;/a&gt;.
The initiative posted &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2023/12/22/trait-system-refactor-initiative.html&quot;&gt;a separate update&lt;/a&gt; at the end of last year. While
we would have liked to &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/121848&quot;&gt;stabilize its use in coherence&lt;/a&gt; a few months ago,
this surfaced additional small behavior regressions and hangs, causing delays. We are working on fixing these issues and intend to merge the stabilization PR soon. We are getting close to compiling the standard library
and the compiler with the new solver enabled everywhere, after which will be able to run
crater to figure out the remaining issues. We expect there to be a long tail of minor issues
and behavioral differences from the existing implementation, so there&#x27;s still a lot to do
here. There are also open design questions which we will have to resolve before stabilizing
the new implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#async-and-impl-trait&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;async-and-impl-trait&quot;&gt;&lt;/a&gt;Async and &lt;code&gt;impl Trait&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We stabilized &lt;code&gt;async&lt;/code&gt;-fn in traits (AFIT) and return-position &lt;code&gt;impl Trait&lt;/code&gt; in
traits (RPITIT) in version 1.75 thanks to a significant effort by &lt;a href&#x3D;&quot;https://github.com/compiler-errors&quot;&gt;@compiler-errors&lt;/a&gt; and
&lt;a href&#x3D;&quot;https://github.com/spastorino&quot;&gt;@spastorino&lt;/a&gt;. &lt;a href&#x3D;&quot;https://github.com/cjgillot&quot;&gt;@cjgillot&lt;/a&gt; greatly improved the way generators, and therefore async functions,
are represented in the type system&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn-107421&quot; id&#x3D;&quot;fnref-107421&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;. This allowed us to support recursive
&lt;code&gt;async&lt;/code&gt;-functions without too much additional work&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn-117703&quot; id&#x3D;&quot;fnref-117703&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Designing the next-generation trait solver surfaced issues and future-compatibility challenges
of our type-alias &lt;code&gt;impl Trait&lt;/code&gt; (TAIT) implementation using the old trait solver. We are
currently reworking the design and implementation. &lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;@oli-obk&lt;/a&gt; is spear-heading this effort.
This also impacts RPIT edge-cases, forcing us to be careful to avoid accidental breakage.
There are some open language design questions for TAIT, so we plan to
stabilize associated type position &lt;code&gt;impl Trait&lt;/code&gt; (ATPIT) as it avoids these language design
questions while still closing the expressiveness gap.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#a-mir-formality&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;a-mir-formality&quot;&gt;&lt;/a&gt;&lt;code&gt;a-mir-formality&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We made limited progress on &lt;a href&#x3D;&quot;https://github.com/rust-lang/a-mir-formality&quot;&gt;&lt;code&gt;a-mir-formality&lt;/code&gt;&lt;/a&gt; over the last year, mostly
because we were able to allocate less time than expected towards this work.
We have used it as the foundation towards an intuitive approach to
coinductive traits which are necessary for many of the remaining unsound
issues.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#fixing-soundness-issues&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;fixing-soundness-issues&quot;&gt;&lt;/a&gt;Fixing soundness issues&lt;/h3&gt;
&lt;p&gt;We fixed multiple long-standing unsound issues, see &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aissue+label%3AI-unsound+label%3AT-types+-label%3Arequires-nightly+is%3Aclosed+closed%3A%3C2024-06-20+&quot;&gt;the full list of closed issues&lt;/a&gt;. The most most notable of which was &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/80176&quot;&gt;#80176&lt;/a&gt;. This subtle issue caused us to accept methods in trait implementations whose function signature had outlives requirements not present in the trait definition. These requirements were then never proven when calling the trait method. As there were some crates which relied on this pattern by accident, even if it their usages didn&#x27;t exploit this unsoundness, we first merged a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/105572&quot;&gt;future-compatibility lint&lt;/a&gt; which we then moved to a hard error after a few versions.&lt;/p&gt;
&lt;p&gt;We&#x27;ve also spent time on &lt;a href&#x3D;&quot;https://github.com/orgs/rust-lang/projects/44/views/1&quot;&gt;categorizing the remaining open issues&lt;/a&gt; and integrating
them into our longterm planning. Most of the remaining ones are blocked on the
next-generation trait solver as fixing them relies on coinductive trait semantics
and improvements to implied bounds. There are some remaining issues which can be at
least partially fixed right now, and we intend to work through them as we go.
Finally, there are some issues for which we still haven&#x27;t figured out the best
approach and which require some further considerations.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#going-forward&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;going-forward&quot;&gt;&lt;/a&gt;Going forward&lt;/h2&gt;
&lt;p&gt;We made significant progress during the last year but we are not done! This section covers our goals for the rest of 2024. For each item we also link to the project goals that we have proposed as part of the Rust Project&#x27;s &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2024/05/07/announcing-project-goals.html&quot;&gt;experimental new roadmap process&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#-znext-solver&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;-znext-solver&quot;&gt;&lt;/a&gt;&lt;code&gt;-Znext-solver&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/next-solver.html&quot;&gt;Next-generation trait solver project goal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our biggest goal is to use the &lt;a href&#x3D;&quot;https://github.com/rust-lang/trait-system-refactor-initiative/&quot;&gt;next-generation trait solver&lt;/a&gt;
everywhere by default and to fully replace the existing implementation. We are currently
finalizing the stabilization of &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/121848&quot;&gt;its use in coherence checking&lt;/a&gt;. This should
already fix multiple unsound issues and fix a lot of smaller issues and inconsistencies of
the current implementation. See the stabilization report for more details.&lt;/p&gt;
&lt;p&gt;We are also working on extracting its implementation into a separate library
outside of the compiler itself. We would like to share the trait solver with
rust-analyzer by the end of this year. They currently use &lt;a href&#x3D;&quot;https://github.com/rust-lang/chalk/&quot;&gt;chalk&lt;/a&gt; which is no longer
actively maintained. Using the next-generation trait solver in rust-analyzer
should result in a lot of additional testing for the solver while also improving
the IDE experience by positively impacting performance and correctness.&lt;/p&gt;
&lt;p&gt;We intend to slowly roll out the solver in other areas of the compiler until we&#x27;re able
to fully remove the existing implementation by the end of 2025. This switch will fix
multiple unsound issues by itself and will unblock a significant amount of future work.
It will generally cleanup many rough edges of the type system, such as associated types
in higher-ranked types. There are many unsound issues which can only be fixed once we exclusively
use the new implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#a-mir-formality-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;a-mir-formality-1&quot;&gt;&lt;/a&gt;&lt;code&gt;a-mir-formality&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/a-mir-formality.html&quot;&gt;&lt;code&gt;a-mir-formality&lt;/code&gt; project goal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We intend to more actively develop &lt;code&gt;a-mir-formality&lt;/code&gt; this year to use it in our design process.
Using it to model parts of the type system has already been incredibly impactful and we want
to build on that. We are working on more effective testing of &lt;code&gt;a-mir-formality&lt;/code&gt; by enabling its
use for actual Rust code snippets and by adding fuzzing support. This will allow us to gain
additional confidence in our model of the type system and will guide its future development.&lt;/p&gt;
&lt;p&gt;We plan to fully formalize some components of the type system this year. Coherence is fairly
self-contained, very subtle, and soundness-critical. This has prevented us from making significant
improvements to it in the past. We also intend to formalize coinductive trait semantics, which are
difficult to reason about and necessary to fix many longstanding soundness issues.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#language-changes-and-polonius&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;language-changes-and-polonius&quot;&gt;&lt;/a&gt;Language changes and polonius&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/ATPIT.html&quot;&gt;Associated Type Position Impl Trait (ATPIT) project goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/Polonius.html&quot;&gt;Polonius on Nightly project goal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We intend to get the internal implementation of opaque types ready for the stabilization
of TAIT and ATPIT this year. We are also hoping to land significant improvements to our
handling of associated types in coherence checking this year.&lt;/p&gt;
&lt;p&gt;Our other goal is to get &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html&quot;&gt;Polonius&lt;/a&gt;, the next generation borrow checker, available on nightly, which would put us in a position to stabilize in 2025 once we have time to do more optimization and testing.&lt;/p&gt;
&lt;p&gt;We also intend to support the development of other language features, such as &lt;code&gt;async&lt;/code&gt;-closures, which are part of the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2024h2/async.html&quot;&gt;async project goal&lt;/a&gt;,
and &lt;code&gt;dyn&lt;/code&gt;-trait upcasting, which will hopefully get stabilized in the near future.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#roadmap&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;roadmap&quot;&gt;&lt;/a&gt;Roadmap&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#eoy-2024&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;eoy-2024&quot;&gt;&lt;/a&gt;EOY 2024&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;next-generation trait solver
&lt;ul&gt;
&lt;li&gt;stable in coherence&lt;/li&gt;
&lt;li&gt;used by rust-analyzer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ATPIT stabilized&lt;/li&gt;
&lt;li&gt;a-mir-formality
&lt;ul&gt;
&lt;li&gt;support for fuzzing and testing Rust snippets&lt;/li&gt;
&lt;li&gt;complete model of coherence and coinductive trait semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;full polonius implementation available on nightly&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#eoy-2025&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;eoy-2025&quot;&gt;&lt;/a&gt;EOY 2025&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;next-generation trait solver used everywhere by default&lt;/li&gt;
&lt;li&gt;TAIT stabilized&lt;/li&gt;
&lt;li&gt;polonius stabilized&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#eoy-2027&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;eoy-2027&quot;&gt;&lt;/a&gt;EOY 2027&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;next-generation trait solver
&lt;ul&gt;
&lt;li&gt;support for coinduction and (implicit) where-bounds on &lt;code&gt;for&amp;lt;&#x27;a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enable perfect derive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a-mir-formality fully model soundness critical parts of Rust&lt;/li&gt;
&lt;li&gt;all known type system unsoundnesses fixed&lt;/li&gt;
&lt;/ul&gt;
&lt;section class&#x3D;&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn-107421&quot;&gt;
&lt;p&gt;stabilized in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/107421&quot;&gt;https://github.com/rust-lang/rust/issues/107421&lt;/a&gt; &lt;a href&#x3D;&quot;#fnref-107421&quot; class&#x3D;&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx&#x3D;&quot;1&quot; aria-label&#x3D;&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-117703&quot;&gt;
&lt;p&gt;stabilized in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/117703&quot;&gt;https://github.com/rust-lang/rust/issues/117703&lt;/a&gt; &lt;a href&#x3D;&quot;#fnref-117703&quot; class&#x3D;&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx&#x3D;&quot;2&quot; aria-label&#x3D;&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>lcnr</name>
        </author>
    </entry>
    <entry>
        <title>Announcing Rust 1.79.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.html" type="text/html" title="Announcing Rust 1.79.0" />
        <published>2024-06-13T00:00:00+00:00</published>
        <updated>2024-06-13T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.79.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via &lt;code&gt;rustup&lt;/code&gt;, you can get 1.79.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;$ rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/releases.html#version-1790-2024-06-13&quot;&gt;detailed release notes for 1.79.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1790-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1790-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.79.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#inline-const-expressions&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;inline-const-expressions&quot;&gt;&lt;/a&gt;Inline &lt;code&gt;const&lt;/code&gt; expressions&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;const { ... }&lt;/code&gt; blocks are now stable in expression position, permitting
explicitly entering a const context without requiring extra declarations (e.g.,
defining &lt;code&gt;const&lt;/code&gt; items or associated constants on a trait).&lt;/p&gt;
&lt;p&gt;Unlike const items (&lt;code&gt;const ITEM: ... &#x3D; ...&lt;/code&gt;), inline consts are able to make
use of in-scope generics, and have their type inferred rather than written explicitly, making them particularly useful for inline code snippets. For example, a pattern like:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;const EMPTY: Option&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt; &#x3D; None;
let foo &#x3D; [EMPTY; 100];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;can now be written like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;let foo &#x3D; [const { None }; 100];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notably, this is also true of generic contexts, where previously a verbose trait declaration with an associated constant would be required:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn create_none_array&amp;lt;T, const N: usize&amp;gt;() -&amp;gt; [Option&amp;lt;T&amp;gt;; N] {
    [const { None::&amp;lt;T&amp;gt; }; N]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes this code much more succinct and easier to read.&lt;/p&gt;
&lt;p&gt;See the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/reference/expressions/block-expr.html#const-blocks&quot;&gt;reference documentation&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#bounds-in-associated-type-position&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;bounds-in-associated-type-position&quot;&gt;&lt;/a&gt;Bounds in associated type position&lt;/h3&gt;
&lt;p&gt;Rust 1.79 stabilizes the associated item bounds syntax, which allows us to put
bounds in associated type position within other bounds, i.e.
&lt;code&gt;T: Trait&amp;lt;Assoc: Bounds...&amp;gt;&lt;/code&gt;. This avoids the need to provide an extra,
explicit generic type just to constrain the associated type.&lt;/p&gt;
&lt;p&gt;This feature allows specifying bounds in a few places that previously either
were not possible or imposed extra, unnecessary constraints on usage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;where&lt;/code&gt; clauses&lt;/strong&gt; - in this position, this is equivalent to breaking up the bound into two (or more) &lt;code&gt;where&lt;/code&gt; clauses. For example, &lt;code&gt;where T: Trait&amp;lt;Assoc: Bound&amp;gt;&lt;/code&gt; is equivalent to &lt;code&gt;where T: Trait, &amp;lt;T as Trait&amp;gt;::Assoc: Bound&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supertraits&lt;/strong&gt; - a bound specified via the new syntax is implied when the trait is used, unlike where clauses. Sample syntax: &lt;code&gt;trait CopyIterator: Iterator&amp;lt;Item: Copy&amp;gt; {}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Associated type item bounds&lt;/strong&gt; - This allows constraining the &lt;em&gt;nested&lt;/em&gt; rigid projections that are associated with a trait&#x27;s associated types. e.g. &lt;code&gt;trait Trait { type Assoc: Trait2&amp;lt;Assoc2: Copy&amp;gt;; }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;opaque type bounds (RPIT, TAIT)&lt;/strong&gt; - This allows constraining associated types that are associated with the opaque type without having to &lt;em&gt;name&lt;/em&gt; the opaque type. For example, &lt;code&gt;impl Iterator&amp;lt;Item: Copy&amp;gt;&lt;/code&gt; defines an iterator whose item is &lt;code&gt;Copy&lt;/code&gt; without having to actually name that item bound.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/122055/#issue-2170532454&quot;&gt;the stabilization report&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#extending-automatic-temporary-lifetime-extension&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;extending-automatic-temporary-lifetime-extension&quot;&gt;&lt;/a&gt;Extending automatic temporary lifetime extension&lt;/h3&gt;
&lt;p&gt;Temporaries which are immediately referenced in construction are now
automatically lifetime extended in &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; constructs. This has the
same behavior as lifetime extension for temporaries in block constructs.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;let a &#x3D; if true {
    ..;
    &amp;amp;temp() // used to error, but now gets lifetime extended
} else {
    ..;
    &amp;amp;temp() // used to error, but now gets lifetime extended
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;let a &#x3D; match () {
    _ &#x3D;&amp;gt; {
        ..;
        &amp;amp;temp() // used to error, but now gets lifetime extended
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;are now consistent with prior behavior:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;let a &#x3D; {
    ..;
    &amp;amp;temp() // lifetime is extended
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This behavior is backwards compatible since these programs used to fail compilation.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#frame-pointers-enabled-in-standard-library-builds&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;frame-pointers-enabled-in-standard-library-builds&quot;&gt;&lt;/a&gt;Frame pointers enabled in standard library builds&lt;/h3&gt;
&lt;p&gt;The standard library distributed by the Rust project is now compiled with
&lt;code&gt;-Cforce-frame-pointers&#x3D;yes&lt;/code&gt;, enabling downstream users to more easily profile
their programs. Note that the standard library also continues to come up with
line-level debug info (e.g., DWARF), though that is &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/03/21/Rust-1.77.0.html#enable-strip-in-release-profiles-by-default&quot;&gt;stripped by default&lt;/a&gt; in Cargo&#x27;s release profiles.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.i32.html#method.unchecked_add&quot;&gt;&lt;code&gt;{integer}::unchecked_add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.i32.html#method.unchecked_mul&quot;&gt;&lt;code&gt;{integer}::unchecked_mul&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.i32.html#method.unchecked_sub&quot;&gt;&lt;code&gt;{integer}::unchecked_sub&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.split_at_unchecked&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.split_at_mut_unchecked&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_mut_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.slice.html#method.utf8_chunks&quot;&gt;&lt;code&gt;&amp;lt;[u8]&amp;gt;::utf8_chunks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/str/struct.Utf8Chunks.html&quot;&gt;&lt;code&gt;str::Utf8Chunks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/str/struct.Utf8Chunk.html&quot;&gt;&lt;code&gt;str::Utf8Chunk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.is_aligned&quot;&gt;&lt;code&gt;&amp;lt;*const T&amp;gt;::is_aligned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.is_aligned-1&quot;&gt;&lt;code&gt;&amp;lt;*mut T&amp;gt;::is_aligned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/ptr/struct.NonNull.html#method.is_aligned&quot;&gt;&lt;code&gt;NonNull::is_aligned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.len&quot;&gt;&lt;code&gt;&amp;lt;*const [T]&amp;gt;::len&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.len-1&quot;&gt;&lt;code&gt;&amp;lt;*mut [T]&amp;gt;::len&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.is_empty&quot;&gt;&lt;code&gt;&amp;lt;*const [T]&amp;gt;::is_empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.is_empty-1&quot;&gt;&lt;code&gt;&amp;lt;*mut [T]&amp;gt;::is_empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/ptr/struct.NonNull.html#method.is_empty&quot;&gt;&lt;code&gt;NonNull::&amp;lt;[T]&amp;gt;::is_empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/ffi/c_str/struct.CStr.html#method.count_bytes&quot;&gt;&lt;code&gt;CStr::count_bytes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/struct.Error.html#method.downcast&quot;&gt;&lt;code&gt;io::Error::downcast&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/num/struct.NonZero.html&quot;&gt;&lt;code&gt;num::NonZero&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/path/fn.absolute.html&quot;&gt;&lt;code&gt;path::absolute&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/proc_macro/struct.Literal.html#method.byte_character&quot;&gt;&lt;code&gt;proc_macro::Literal::byte_character&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/proc_macro/struct.Literal.html#method.c_string&quot;&gt;&lt;code&gt;proc_macro::Literal::c_string&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/sync/atomic/struct.AtomicUsize.html#method.into_inner&quot;&gt;&lt;code&gt;Atomic*::into_inner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#method.new&quot;&gt;&lt;code&gt;io::Cursor::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#method.get_ref&quot;&gt;&lt;code&gt;io::Cursor::get_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#method.position&quot;&gt;&lt;code&gt;io::Cursor::position&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/fn.empty.html&quot;&gt;&lt;code&gt;io::empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/fn.repeat.html&quot;&gt;&lt;code&gt;io::repeat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/fn.sink.html&quot;&gt;&lt;code&gt;io::sink&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/panic/struct.Location.html#method.caller&quot;&gt;&lt;code&gt;panic::Location::caller&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/panic/struct.Location.html#method.file&quot;&gt;&lt;code&gt;panic::Location::file&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/panic/struct.Location.html#method.line&quot;&gt;&lt;code&gt;panic::Location::line&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/panic/struct.Location.html#method.column&quot;&gt;&lt;code&gt;panic::Location::column&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/releases/tag/1.79.0&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-179-2024-06-13&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-179&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributors-to-1790&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1790&quot;&gt;&lt;/a&gt;Contributors to 1.79.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.79.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.79.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    <entry>
        <title>Faster linking times on nightly on Linux using &#x60;rust-lld&#x60;</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html" type="text/html" title="Faster linking times on nightly on Linux using &#x60;rust-lld&#x60;" />
        <published>2024-05-17T00:00:00+00:00</published>
        <updated>2024-05-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html">&lt;p&gt;TL;DR: rustc will use &lt;code&gt;rust-lld&lt;/code&gt; by default on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; on nightly to
significantly reduce linking times.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#some-context&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;some-context&quot;&gt;&lt;/a&gt;Some context&lt;/h4&gt;
&lt;p&gt;Linking time is often a big part of compilation time. When rustc needs to build a binary or a shared
library, it will usually call the default linker installed on the system to do that (this can be
changed on the command-line or by the target for which the code is compiled).&lt;/p&gt;
&lt;p&gt;The linkers do an important job, with concerns about stability, backwards-compatibility and so on.
For these and other reasons, on the most popular operating systems they usually are older programs,
designed when computers only had a single core. So, they usually tend to be slow on a modern
machine. For example, when building ripgrep 13 in debug mode on Linux, roughly half of the time is
actually spent in the linker.&lt;/p&gt;
&lt;p&gt;There are different linkers, however, and the usual advice to improve linking times is to use one of
these newer and faster linkers, like LLVM&#x27;s &lt;a href&#x3D;&quot;https://lld.llvm.org/&quot;&gt;&lt;code&gt;lld&lt;/code&gt;&lt;/a&gt; or Rui Ueyama&#x27;s
&lt;a href&#x3D;&quot;https://github.com/rui314/mold&quot;&gt;&lt;code&gt;mold&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of Rust&#x27;s wasm and aarch64 targets already use &lt;code&gt;lld&lt;/code&gt; by default. When using rustup, rustc ships
with a version of &lt;code&gt;lld&lt;/code&gt; for this purpose. When CI builds LLVM to use in the compiler, it also builds
the linker and packages it. It&#x27;s referred to as &lt;code&gt;rust-lld&lt;/code&gt; to avoid colliding with any &lt;code&gt;lld&lt;/code&gt; already
installed on the user&#x27;s machine.&lt;/p&gt;
&lt;p&gt;Since improvements to linking times are substantial, it would be a good default to use in the most
popular targets. This has been discussed for a long time, for example in issues
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/39915&quot;&gt;#39915&lt;/a&gt; and
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/71515&quot;&gt;#71515&lt;/a&gt;, and rustc already offers nightly flags to
use &lt;code&gt;rust-lld&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By now, we believe we&#x27;ve done all the internal testing that we could, on CI, crater, and our
benchmarking infrastructure. We would now like to expand testing and gather real-world feedback and
use-cases. Therefore, we will enable &lt;code&gt;rust-lld&lt;/code&gt; to be the linker used by default on
&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; for nightly builds.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#benefits&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;benefits&quot;&gt;&lt;/a&gt;Benefits&lt;/h4&gt;
&lt;p&gt;While this also enables the compiler to use more linker features in the future, the most immediate
benefit is much improved linking times.&lt;/p&gt;
&lt;p&gt;Here are more details from the ripgrep example mentioned above: linking is reduced 7x, resulting in
a 40% reduction in end-to-end compilation times.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;../../../../images/2024-05-17-enabling-rust-lld-on-linux/ripgrep-comparison.png&quot; alt&#x3D;&quot;Before/after comparison of a ripgrep debug build&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Most binaries should see some improvements here, but it&#x27;s especially significant with e.g. bigger
binaries, or when involving debuginfo. These usually see bottlenecks in the linker.&lt;/p&gt;
&lt;p&gt;Here&#x27;s &lt;a href&#x3D;&quot;https://perf.rust-lang.org/compare.html?start&#x3D;b3e117044c7f707293edc040edb93e7ec5f7040a&amp;amp;end&#x3D;baed03c51a68376c1789cc373581eea0daf89967&amp;amp;stat&#x3D;instructions%3Au&amp;amp;tab&#x3D;compile&quot;&gt;a
link&lt;/a&gt;
to the complete results from our benchmarks.&lt;/p&gt;
&lt;p&gt;If testing goes well, we can then stabilize using this faster linker by default for
&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; users, before maybe looking at other targets.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#possible-drawbacks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;possible-drawbacks&quot;&gt;&lt;/a&gt;Possible drawbacks&lt;/h4&gt;
&lt;p&gt;From our prior testing, we don&#x27;t really expect issues to happen in practice. It is a drop-in
replacement for the vast majority of cases, but &lt;code&gt;lld&lt;/code&gt; is not &lt;em&gt;bug-for-bug&lt;/em&gt; compatible with GNU ld.&lt;/p&gt;
&lt;p&gt;In any case, using &lt;code&gt;rust-lld&lt;/code&gt; can be disabled if any problem occurs: use the &lt;code&gt;-Z linker-features&#x3D;-lld&lt;/code&gt; flag to revert to using the system&#x27;s default linker.&lt;/p&gt;
&lt;p&gt;Some crates somehow relying on these differences could need additional link args. For example, we
saw &amp;lt;20 crates in the crater run failing to link because of a different default about &lt;a href&#x3D;&quot;https://lld.llvm.org/ELF/start-stop-gc&quot;&gt;encapsulation
symbols&lt;/a&gt;: these could require
&lt;code&gt;-Clink-arg&#x3D;-Wl,-z,nostart-stop-gc&lt;/code&gt; to match the legacy GNU ld behavior.&lt;/p&gt;
&lt;p&gt;Some of the big gains in performance come from parallelism, which could be undesirable in
resource-constrained environments.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#summary&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;summary&quot;&gt;&lt;/a&gt;Summary&lt;/h4&gt;
&lt;p&gt;rustc will use &lt;code&gt;rust-lld&lt;/code&gt; on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; nightlies, for much improved linking times,
starting in tomorrow&#x27;s rustup nightly (&lt;code&gt;nightly-2024-05-18&lt;/code&gt;).
Let us know if you encounter problems, by &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;opening an
issue&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If that happens, you can revert to the default linker with the &lt;code&gt;-Z linker-features&#x3D;-lld&lt;/code&gt; flag.
Either by adding it to the usual &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable, or to a project&#x27;s
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html&quot;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt; configuration file,
like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[target.x86_64-unknown-linux-gnu]
rustflags &#x3D; [&amp;quot;-Zlinker-features&#x3D;-lld&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</content>

        <author>
            <name>Rémy Rakic</name>
        </author>
    </entry>
    <entry>
        <title>Rust participates in OSPP 2024</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/05/07/OSPP-2024.html" type="text/html" title="Rust participates in OSPP 2024" />
        <published>2024-05-07T00:00:00+00:00</published>
        <updated>2024-05-07T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/05/07/OSPP-2024.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/05/07/OSPP-2024.html">&lt;p&gt;Similar to our &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/02/21/Rust-participates-in-GSoC-2024.html&quot;&gt;previous&lt;/a&gt; &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/05/01/gsoc-2024-selected-projects.html&quot;&gt;announcements&lt;/a&gt; of the Rust Project&#x27;s participation in Google Summer of Code (GSoC), we are now announcing our participation in &lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/&quot;&gt;Open Source Promotion Plan (OSPP) 2024&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;OSPP is a program organized in large part by The Institute of Software Chinese Academy of Sciences. Its goal is to encourage college students to participate in developing and maintaining open source software. The Rust Project is &lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/org/orgdetail/11769be7-d00a-4931-be95-13595ac181e4?lang&#x3D;en&quot;&gt;already registered&lt;/a&gt; and has a number of projects available for mentorship:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/org/prodetail/241170274&quot;&gt;C codegen backend for rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/org/prodetail/241170275&quot;&gt;Extend annotate-snippets with features required by rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/org/prodetail/241170277&quot;&gt;Improve bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/org/prodetail/241170528&quot;&gt;Modernize the libc crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/org/prodetail/241170529&quot;&gt;Improve infrastructure automation tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eligibility is limited to students and there is a &lt;a href&#x3D;&quot;https://summer-ospp.ac.cn/help/en/student/&quot;&gt;guide&lt;/a&gt; for potential participants. Student registration ends on the 3rd of June with the project application deadline a day later.&lt;/p&gt;
&lt;p&gt;Unlike GSoC which allows students to propose their own projects, OSPP requires that students only apply for one of the registered projects. We do have an &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/436418-ospp&quot;&gt;#ospp&lt;/a&gt; Zulip stream and potential contributors are encouraged to join and discuss details about the projects and connect with mentors.&lt;/p&gt;
&lt;p&gt;After the project application window closes on June 4th, we will review and select participants, which will be announced on June 26th. From there, students will participate through to the end of September.&lt;/p&gt;
&lt;p&gt;As with GSoC, this is our first year participating in this program. We are incredibly excited for this opportunity to further expand into new open source communities and we&#x27;re hopeful for a productive and educational summer.&lt;/p&gt;
</content>

        <author>
            <name>Amanieu d&#x27;Antras, Jack Huey, and Jakub Beránek</name>
        </author>
    </entry>
    <entry>
        <title>Automatic checking of cfgs at compile-time</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2024/05/06/check-cfg.html" type="text/html" title="Automatic checking of cfgs at compile-time" />
        <published>2024-05-06T00:00:00+00:00</published>
        <updated>2024-05-06T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2024/05/06/check-cfg.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2024/05/06/check-cfg.html">&lt;p&gt;The Cargo and Compiler team are delighted to announce that starting with Rust 1.80 (or nightly-2024-05-05) every &lt;em&gt;reachable&lt;/em&gt; &lt;code&gt;#[cfg]&lt;/code&gt; will be &lt;strong&gt;automatically checked&lt;/strong&gt; that they match the &lt;strong&gt;expected config names and values&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This can help with verifying that the crate is correctly handling conditional compilation for different target platforms or features. It ensures that the cfg settings are consistent between what is intended and what is used, helping to catch potential bugs or errors early in the development process.&lt;/p&gt;
&lt;p&gt;This addresses a common pitfall for new and advanced users.&lt;/p&gt;
&lt;p&gt;This is another step to our commitment to provide user-focused tooling and we are eager and excited to finally see it fixed, after more than two years since the original &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3013&quot;&gt;RFC 3013&lt;/a&gt;&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn-1&quot; id&#x3D;&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#a-look-at-the-feature&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;a-look-at-the-feature&quot;&gt;&lt;/a&gt;A look at the feature&lt;/h2&gt;
&lt;p&gt;Every time a Cargo feature is declared that feature is transformed into a config that is passed to &lt;code&gt;rustc&lt;/code&gt; (the Rust compiler) so it can verify with it along with &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/check-cfg.html#well-known-names-and-values&quot;&gt;well known cfgs&lt;/a&gt; if any of the &lt;code&gt;#[cfg]&lt;/code&gt;, &lt;code&gt;#![cfg_attr]&lt;/code&gt; and &lt;code&gt;cfg!&lt;/code&gt; have unexpected configs and report a warning with the &lt;code&gt;unexpected_cfgs&lt;/code&gt; lint.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[package]
name &#x3D; &amp;quot;foo&amp;quot;

[features]
lasers &#x3D; []
zapping &#x3D; []
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#[cfg(feature &#x3D; &amp;quot;lasers&amp;quot;)]  // This condition is expected
                            // as &amp;quot;lasers&amp;quot; is an expected value
                            // of the &#x60;feature&#x60; cfg
fn shoot_lasers() {}

#[cfg(feature &#x3D; &amp;quot;monkeys&amp;quot;)] // This condition is UNEXPECTED
                            // as &amp;quot;monkeys&amp;quot; is NOT an expected
                            // value of the &#x60;feature&#x60; cfg
fn write_shakespeare() {}

#[cfg(windosw)]             // This condition is UNEXPECTED
                            // it&#x27;s supposed to be &#x60;windows&#x60;
fn win() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;cargo check&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;../../../../images/2024-05-06-check-cfg/cargo-check.svg&quot; alt&#x3D;&quot;cargo-check&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#expecting-custom-cfgs&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;expecting-custom-cfgs&quot;&gt;&lt;/a&gt;Expecting custom cfgs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;UPDATE: This section was added with the release of nightly-2024-05-19.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Cargo point-of-view: a custom cfg is one that is neither defined by &lt;code&gt;rustc&lt;/code&gt; nor by a Cargo feature. Think of &lt;code&gt;tokio_unstable&lt;/code&gt;, &lt;code&gt;has_foo&lt;/code&gt;, ... but not &lt;code&gt;feature &#x3D; &amp;quot;lasers&amp;quot;&lt;/code&gt;, &lt;code&gt;unix&lt;/code&gt; or &lt;code&gt;debug_assertions&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some crates might use custom cfgs, like &lt;code&gt;loom&lt;/code&gt;, &lt;code&gt;fuzzing&lt;/code&gt; or &lt;code&gt;tokio_unstable&lt;/code&gt; that they expected from the environment (&lt;code&gt;RUSTFLAGS&lt;/code&gt; or other means) and which are always statically known at compile time. For those cases, Cargo provides via the &lt;code&gt;[lints]&lt;/code&gt; table a way to statically declare those cfgs as expected.&lt;/p&gt;
&lt;p&gt;Defining those custom cfgs as expected is done through the special &lt;code&gt;check-cfg&lt;/code&gt; config under &lt;code&gt;[lints.rust.unexpected_cfgs]&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[lints.rust]
unexpected_cfgs &#x3D; { level &#x3D; &amp;quot;warn&amp;quot;, check-cfg &#x3D; [&#x27;cfg(loom)&#x27;, &#x27;cfg(fuzzing)&#x27;] }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#custom-cfgs-in-build-scripts&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;custom-cfgs-in-build-scripts&quot;&gt;&lt;/a&gt;Custom cfgs in build scripts&lt;/h2&gt;
&lt;p&gt;On the other hand some crates use custom cfgs that are enabled by some logic in the crate &lt;code&gt;build.rs&lt;/code&gt;. For those crates Cargo provides a new instruction: &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/build-scripts.html#rustc-check-cfg&quot;&gt;&lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt;&lt;/a&gt;&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn-2&quot; id&#x3D;&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt; (or &lt;code&gt;cargo:rustc-check-cfg&lt;/code&gt; for older Cargo version).&lt;/p&gt;
&lt;p&gt;The syntax to use is described in the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/&quot;&gt;rustc book&lt;/a&gt; section &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/check-cfg.html&quot;&gt;checking configuration&lt;/a&gt;, but in a nutshell the basic syntax of &lt;code&gt;--check-cfg&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cfg(name, values(&amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot;, ..., &amp;quot;valueN&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that every custom cfgs must always be expected, regardless if the cfg is active or not!&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#buildrs-example&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;buildrs-example&quot;&gt;&lt;/a&gt;&lt;code&gt;build.rs&lt;/code&gt; example&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build.rs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn main() {
    println!(&amp;quot;cargo::rustc-check-cfg&#x3D;cfg(has_foo)&amp;quot;);
    //        ^^^^^^^^^^^^^^^^^^^^^^ new with Cargo 1.80
    if has_foo() {
        println!(&amp;quot;cargo::rustc-cfg&#x3D;has_foo&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Each &lt;code&gt;cargo::rustc-cfg&lt;/code&gt; should have an accompanying &lt;strong&gt;unconditional&lt;/strong&gt; &lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt; directive to avoid warnings like this: &lt;code&gt;unexpected cfg condition name: has_foo&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#equivalence-table&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;equivalence-table&quot;&gt;&lt;/a&gt;Equivalence table&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;cargo::rustc-cfg&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cfg(foo)&lt;/code&gt; or &lt;code&gt;cfg(foo, values(none()))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;foo&#x3D;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cfg(foo, values(&amp;quot;&amp;quot;))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;foo&#x3D;&amp;quot;bar&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cfg(foo, values(&amp;quot;bar&amp;quot;))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;foo&#x3D;&amp;quot;1&amp;quot;&lt;/code&gt; and &lt;code&gt;foo&#x3D;&amp;quot;2&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cfg(foo, values(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;foo&#x3D;&amp;quot;1&amp;quot;&lt;/code&gt; and &lt;code&gt;bar&#x3D;&amp;quot;2&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cfg(foo, values(&amp;quot;1&amp;quot;))&lt;/code&gt; and &lt;code&gt;cfg(bar, values(&amp;quot;2&amp;quot;))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;foo&#x3D;&amp;quot;bar&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cfg(foo, values(none(), &amp;quot;bar&amp;quot;))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;More details can be found in the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/check-cfg.html&quot;&gt;&lt;code&gt;rustc&lt;/code&gt; book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#frequently-asked-questions&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;frequently-asked-questions&quot;&gt;&lt;/a&gt;Frequently asked questions&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#can-it-be-disabled&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;can-it-be-disabled&quot;&gt;&lt;/a&gt;Can it be disabled?&lt;/h3&gt;
&lt;p&gt;For Cargo users, the feature is &lt;strong&gt;always on&lt;/strong&gt; and &lt;em&gt;cannot&lt;/em&gt; be disabled, but like any other lints it can be controlled: &lt;code&gt;#![warn(unexpected_cfgs)]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#does-the-lint-affect-dependencies&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;does-the-lint-affect-dependencies&quot;&gt;&lt;/a&gt;Does the lint affect dependencies?&lt;/h3&gt;
&lt;p&gt;No, like most lints, &lt;code&gt;unexpected_cfgs&lt;/code&gt; will only be reported for local packages thanks to &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/lints/levels.html#capping-lints&quot;&gt;cap-lints&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-does-it-interact-with-the-rustflags-env&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-does-it-interact-with-the-rustflags-env&quot;&gt;&lt;/a&gt;How does it interact with the &lt;code&gt;RUSTFLAGS&lt;/code&gt; env?&lt;/h3&gt;
&lt;p&gt;You should be able to use the &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable like it was before.
&lt;em&gt;Currently &lt;code&gt;--cfg&lt;/code&gt; arguments are not checked, only usage in code are.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This means that doing &lt;code&gt;RUSTFLAGS&#x3D;&amp;quot;--cfg tokio_unstable&amp;quot; cargo check&lt;/code&gt; will not report any warnings, unless &lt;code&gt;tokio_unstable&lt;/code&gt; is used within your local crates, in which case crate author will need to make sure that that custom cfg is expected with &lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt; in the &lt;code&gt;build.rs&lt;/code&gt; of that crate.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-to-expect-custom-cfgs-without-a-buildrs&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-to-expect-custom-cfgs-without-a-buildrs&quot;&gt;&lt;/a&gt;How to expect custom cfgs without a &lt;code&gt;build.rs&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;UPDATE: Cargo with nightly-2024-05-19 now provides the &lt;code&gt;[lints.rust.unexpected_cfgs.check-cfg]&lt;/code&gt; config to address the statically known custom cfgs.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;There is &lt;strong&gt;currently no way&lt;/strong&gt; to expect a custom cfg other than with &lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt; in a &lt;code&gt;build.rs&lt;/code&gt;.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Crate authors that don&#x27;t want to use a &lt;code&gt;build.rs&lt;/code&gt; and cannot use &lt;code&gt;[lints.rust.unexpected_cfgs.check-cfg]&lt;/code&gt;, are encouraged to use Cargo features instead.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-does-it-interact-with-other-build-systems&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-does-it-interact-with-other-build-systems&quot;&gt;&lt;/a&gt;How does it interact with other build systems?&lt;/h3&gt;
&lt;p&gt;Non-Cargo based build systems are not affected by the lint by default. Build system authors that wish to have the same functionality should look at the &lt;code&gt;rustc&lt;/code&gt; documentation for the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/check-cfg.html&quot;&gt;&lt;code&gt;--check-cfg&lt;/code&gt;&lt;/a&gt; flag for a detailed explanation of how to achieve the same functionality.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn-1&quot;&gt;
&lt;p&gt;The stabilized implementation and RFC 3013 diverge significantly, in particular there is only one form for &lt;code&gt;--check-cfg&lt;/code&gt;: &lt;code&gt;cfg()&lt;/code&gt; (instead of &lt;code&gt;values()&lt;/code&gt; and &lt;code&gt;names()&lt;/code&gt; being incomplete and subtlety incompatible with each other). &lt;a href&#x3D;&quot;#fnref-1&quot; class&#x3D;&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx&#x3D;&quot;1&quot; aria-label&#x3D;&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt; will start working in Rust 1.80 (or nightly-2024-05-05). From Rust 1.77 to Rust 1.79 &lt;em&gt;(inclusive)&lt;/em&gt; it is silently ignored. In Rust 1.76 and below a warning is emitted when used without the unstable Cargo flag &lt;code&gt;-Zcheck-cfg&lt;/code&gt;. &lt;a href&#x3D;&quot;#fnref-2&quot; class&#x3D;&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx&#x3D;&quot;2&quot; aria-label&#x3D;&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Urgau</name>
        </author>
    </entry>
</feed>
